length(x)
sigmasq*1e4/(1e4 - 1)
L <- function(mu, sigma2) -.5*sum(log(2*pi*sigma2) - (x-mu)^2/(2*sigma2))
-2*(L(mu, sigmasq) - L(0,sigmasq2))
sigmasq2 <- mean(x^2)
-2*(L(mu, sigmasq) - L(0,sigmasq2))
2*(L(mu, sigmasq) - L(0,sigmasq2))
1 - pchisq(2*(L(mu, sigmasq) - L(0,sigmasq2)), 1)
S <- c(sum(x) / sigmasq2, -1e4*.5/sigmasq2 + sum(x^2) / (2*sigmasq2^2))
S
I <- matrix(c(-1e4 / sigmasq2, -sum(x) / sigmasq2^2, -sum(x) / sigmasq2^2,
1e4/(2*sigmasq2^2) - sum(x^2) / sigmasq2^3))
t(S) %*% I %*% S
S
I
I <- matrix(c(-1e4 / sigmasq2, -sum(x) / sigmasq2^2, -sum(x) / sigmasq2^2,
1e4/(2*sigmasq2^2) - sum(x^2) / sigmasq2^3), nrow = 2)
t(S) %*% I %*% S
-t(S) %*% I %*% S / 1e4
t(S) %*% solve(I) %*% S
1 - pchisq(-t(S) %*% solve(I) %*% S)
1 - pchisq(-t(S) %*% solve(I) %*% S, 1)
1 - pchisq(-t(S) %*% solve(I) %*% S, 1)
1 - pchisq(2*(L(mu, sigmasq) - L(0,sigmasq2)), 1)
mean(x) / sqrt(sigmasq)
mean(x) / sqrt(sigmasq)
mean(x) / sqrt(sigmasq * 1e4)
mean(x)*100 / sqrt(sigmasq)
pnorm(mean(x)*100 / sqrt(sigmasq)) * 2
1 - pchisq(2*(L(mu, sigmasq) - L(0,sigmasq2)), 1)
1 - pchisq(-t(S) %*% solve(I) %*% S, 1)
set.seed(19012021)
x <- rnorm(1e4)
mu <- mean(x)
sigmasq <- mean((x-mu)^2)
mu2 <- 0
sigmasq2 <- mean(x^2)
L <- function(mu, sigma2) -.5*sum(log(2*pi*sigma2) - (x-mu)^2/(2*sigma2))
1 - pchisq(2*(L(mu, sigmasq) - L(0,sigmasq2)), 1)
S <- c(sum(x) / sigmasq2, -1e4*.5/sigmasq2 + sum(x^2) / (2*sigmasq2^2))
I <- matrix(c(-1e4 / sigmasq2, -sum(x) / sigmasq2^2, -sum(x) / sigmasq2^2,
1e4/(2*sigmasq2^2) - sum(x^2) / sigmasq2^3), nrow = 2)
1 - pchisq(-t(S) %*% solve(I) %*% S, 1)
pnorm(mean(x)*100 / sqrt(sigmasq)) * 2
1 - pchisq(2*(L(mu, sigmasq) - L(0,sigmasq2)), 1)
1 - pchisq(-t(S) %*% solve(I) %*% S, 1)
pnorm(mean(x)*100 / sqrt(sigmasq)) * 2
# pakke -------------------------------------------------------------------
library(glmnet)
library(mgcv)
expit <- function(x) 1 / (1+exp(-x))
n <- 1e4
------------------------------------------------------
x <- rnorm(n)
p <- expit(x)
y <- rbinom(n, 1, p)
d <- data.frame(fold = rep(1:5, each = n/5), x, y)
pred1 <- pred2 <- NULL
X <- do.call("rbind", lapply(1:n, function(i){
dtrain <- d[-i,]
dval <- d[i,]
m3 <- knn3(y ~ x, k = 9, data = dtrain)
pred3 <- predict(m3, newdata = dval)[1,2]
m4 <- knn3(y ~ x, k = 3, data = dtrain)
pred4 <- predict(m4, newdata = dval)[1,2]
m5 <- knn3(y ~ x, k = 5, data = dtrain)
pred5 <- predict(m5, newdata = dval)[1,2]
m6 <- knn3(y ~ x, k = 7, data = dtrain)
pred6 <- predict(m6, newdata = dval)[1,2]
# c(pred1,pred2,pred3,pred4,pred5,pred6)
c(pred3,pred4,pred5,pred6)
}))
X
X <- do.call("rbind", lapply(1:n, function(i){
dtrain <- d[-i,]
dval <- d[i,]
m3 <- knn3(y ~ x, k = 9, data = dtrain)
pred3 <- predict(m3, newdata = dval)[1,2]
m4 <- knn3(y ~ x, k = 3, data = dtrain)
pred4 <- predict(m4, newdata = dval)[1,2]
m5 <- knn3(y ~ x, k = 5, data = dtrain)
pred5 <- predict(m5, newdata = dval)[1,2]
m6 <- knn3(y ~ x, k = 7, data = dtrain)
pred6 <- predict(m6, newdata = dval)[1,2]
# c(pred1,pred2,pred3,pred4,pred5,pred6)
c(pred3,pred4,pred5,pred6)
}))
d
x
x <- rnorm(n)
p <- expit(x)
y <- rbinom(n, 1, p)
d <- data.frame(fold = rep(1:5, each = n/5), x, y)
pred1 <- pred2 <- NULL
X <- do.call("rbind", lapply(1:n, function(i){
dtrain <- d[-i,]
dval <- d[i,]
m3 <- knn3(y ~ x, k = 9, data = dtrain)
pred3 <- predict(m3, newdata = dval)[1,2]
m4 <- knn3(y ~ x, k = 3, data = dtrain)
pred4 <- predict(m4, newdata = dval)[1,2]
m5 <- knn3(y ~ x, k = 5, data = dtrain)
pred5 <- predict(m5, newdata = dval)[1,2]
m6 <- knn3(y ~ x, k = 7, data = dtrain)
pred6 <- predict(m6, newdata = dval)[1,2]
# c(pred1,pred2,pred3,pred4,pred5,pred6)
c(pred3,pred4,pred5,pred6)
}))
library(caret)
x <- rnorm(n)
p <- expit(x)
y <- rbinom(n, 1, p)
d <- data.frame(fold = rep(1:5, each = n/5), x, y)
pred1 <- pred2 <- NULL
X <- do.call("rbind", lapply(1:n, function(i){
dtrain <- d[-i,]
dval <- d[i,]
m3 <- knn3(y ~ x, k = 9, data = dtrain)
pred3 <- predict(m3, newdata = dval)[1,2]
m4 <- knn3(y ~ x, k = 3, data = dtrain)
pred4 <- predict(m4, newdata = dval)[1,2]
m5 <- knn3(y ~ x, k = 5, data = dtrain)
pred5 <- predict(m5, newdata = dval)[1,2]
m6 <- knn3(y ~ x, k = 7, data = dtrain)
pred6 <- predict(m6, newdata = dval)[1,2]
# c(pred1,pred2,pred3,pred4,pred5,pred6)
c(pred3,pred4,pred5,pred6)
}))
m <- pcls(list(y = y,
w = rep(1,length(y)),
X = X,
C = matrix(rep(1,4),nrow=1),
Ain = diag(4),
bin = rep(0,4),
p = rep(1/4,4)))
round(m,2)
?glmnet
m2 <- glmnet(y=y, x = X)
m2$lambda
m2$beta
str(m2$beta)
m2$beta@p
coef(m2)
fisk <- coef(m2)
str(fisk)
apply(fisk,1,sum)
apply(fisk,2,sum)
length(m2$lambda)
m2 <- glmnet(y=y, x = X, intercept = FALSE)
fisk <- coef(m2)
apply(fisk,2,sum)
coef(m2)
dim(m2)
str(m2)
dim(m2$beta)
m2$beta[,58]
sum(m2$beta[,58])
round(m,2)
min(m2$lambda)
m2$lambda
m2 <- glmnet(y=y, x = X, intercept = FALSE, lambda = seq(.001,1,.01))
fisk <- coef(m2)
apply(fisk,2,sum)
fisk[,100]
m2 <- glmnet(y=y, x = X, intercept = FALSE, lambda = seq(.001,10,.1))
fisk <- coef(m2)
apply(fisk,2,sum)
m2 <- glmnet(y=y, x = X, intercept = FALSE, lambda = seq(.0001,.1,.001))
fisk <- coef(m2)
apply(fisk,2,sum)
m2 <- glmnet(y=y, x = X, intercept = FALSE, lambda = 0.00000001)
coef(m2)
sum(coef(m2))
coef(lm(y~X-1))
sum(coef(lm(y~X-1)))
m2 <- glmnet(y=y, x = X, intercept = FALSE, lambda = -.1)
round(m,2)
X <- do.call("rbind", lapply(1:5, function(i){
dtrain <- with(d, [fold != i,])
dval <- with(d, d[fold == i,])
m3 <- knn3(y ~ x, k = 9, data = dtrain)
pred3 <- predict(m3, newdata = dval)[1,2]
m4 <- knn3(y ~ x, k = 3, data = dtrain)
pred4 <- predict(m4, newdata = dval)[1,2]
m5 <- knn3(y ~ x, k = 5, data = dtrain)
pred5 <- predict(m5, newdata = dval)[1,2]
m6 <- knn3(y ~ x, k = 7, data = dtrain)
pred6 <- predict(m6, newdata = dval)[1,2]
# c(pred1,pred2,pred3,pred4,pred5,pred6)
c(pred3,pred4,pred5,pred6)
}))
X <- do.call("rbind", lapply(1:5, function(i){
dtrain <- with(d, d[fold != i,])
dval <- with(d, d[fold == i,])
m3 <- knn3(y ~ x, k = 9, data = dtrain)
pred3 <- predict(m3, newdata = dval)[1,2]
m4 <- knn3(y ~ x, k = 3, data = dtrain)
pred4 <- predict(m4, newdata = dval)[1,2]
m5 <- knn3(y ~ x, k = 5, data = dtrain)
pred5 <- predict(m5, newdata = dval)[1,2]
m6 <- knn3(y ~ x, k = 7, data = dtrain)
pred6 <- predict(m6, newdata = dval)[1,2]
# c(pred1,pred2,pred3,pred4,pred5,pred6)
c(pred3,pred4,pred5,pred6)
}))
m <- pcls(list(y = y,
w = rep(1,length(y)),
X = X,
C = matrix(rep(1,4),nrow=1),
Ain = diag(4),
bin = rep(0,4),
p = rep(1/4,4)))
X
m3 <- knn3(y ~ x, k = 9, data = dtrain)
dtrain <- with(d, d[fold != i,])
i <- 1
dtrain <- with(d, d[fold != i,])
dval <- with(d, d[fold == i,])
m3 <- knn3(y ~ x, k = 9, data = dtrain)
pred3 <- predict(m3, newdata = dval)[1,2]
pred3 <- predict(m3, newdata = dval)
pred3
X <- do.call("rbind", lapply(1:5, function(i){
dtrain <- with(d, d[fold != i,])
dval <- with(d, d[fold == i,])
m3 <- knn3(y ~ x, k = 9, data = dtrain)
pred3 <- predict(m3, newdata = dval)[,2]
m4 <- knn3(y ~ x, k = 3, data = dtrain)
pred4 <- predict(m4, newdata = dval)[,2]
m5 <- knn3(y ~ x, k = 5, data = dtrain)
pred5 <- predict(m5, newdata = dval)[,2]
m6 <- knn3(y ~ x, k = 7, data = dtrain)
pred6 <- predict(m6, newdata = dval)[,2]
# c(pred1,pred2,pred3,pred4,pred5,pred6)
c(pred3,pred4,pred5,pred6)
}))
m <- pcls(list(y = y,
w = rep(1,length(y)),
X = X,
C = matrix(rep(1,4),nrow=1),
Ain = diag(4),
bin = rep(0,4),
p = rep(1/4,4)))
X
X <- do.call("rbind", lapply(1:5, function(i){
dtrain <- with(d, d[fold != i,])
dval <- with(d, d[fold == i,])
m3 <- knn3(y ~ x, k = 9, data = dtrain)
pred3 <- predict(m3, newdata = dval)[,2]
m4 <- knn3(y ~ x, k = 3, data = dtrain)
pred4 <- predict(m4, newdata = dval)[,2]
m5 <- knn3(y ~ x, k = 5, data = dtrain)
pred5 <- predict(m5, newdata = dval)[,2]
m6 <- knn3(y ~ x, k = 7, data = dtrain)
pred6 <- predict(m6, newdata = dval)[,2]
# c(pred1,pred2,pred3,pred4,pred5,pred6)
cbind(pred3,pred4,pred5,pred6)
}))
m <- pcls(list(y = y,
w = rep(1,length(y)),
X = X,
C = matrix(rep(1,4),nrow=1),
Ain = diag(4),
bin = rep(0,4),
p = rep(1/4,4)))
round(m,2)
m2 <- glmnet(y=y, x = X, intercept = FALSE)
coef(lm(y~X-1))
sum(coef(lm(y~X-1)))
apply(coef(m2), 2, sum)
round(m,2)
library(kernhaz)
browseVignettes("kernhaz")
library(survival)fit<-khazard(times = lung$time,delta = lung$status-1)
library(survival);fit<-khazard(times = lung$time,delta = lung$status-1)
plot(fit)
x <- rexp(1e4)
c <- rexp(1e4)
t <- pmin(x,c)
d <- t==x
fit2 <- khazard(times = t, delta = d)
summary(d)
fit2 <- khazard(times = t, delta = as.numeric(d))
?khazard
fit2 <- khazard(times = t, delta = as.numeric(d), h.method = "maxlike")
x <- rexp(1e2)
c <- rexp(1e2)
t <- pmin(x,c)
d <- as.numeric(t==x)
fit2 <- khazard(times = t, delta = as.numeric(d))
plot(fit2)
fit3 <- khazard(times = t, delta = as.numeric(d), h.method = "maxlike")
plot(fit3)
plot(fit3, sap = 1)
plot(fit3, las = 1)
warnings()
?khazard
x <- rexp(1e2)
c <- rexp(1e2)
t <- pmin(x,c)
d <- as.numeric(t==x)
fit <- khazard(t, d)
plot(fit)
x <- rexp(1e2)
c <- rexp(1e2)
t <- pmin(x,c)
d <- as.numeric(t==x)
fit <- khazard(t, d)
plot(fit)
x <- rexp(1e2)
c <- rexp(1e2)
t <- pmin(x,c)
d <- as.numeric(t==x)
fit <- khazard(t, d)
plot(fit)
x <- rexp(1e2)
c <- rexp(1e2)
t <- pmin(x,c)
d <- as.numeric(t==x)
fit <- khazard(t, d)
plot(fit)
x <- rexp(1e2)
c <- rexp(1e2)
t <- pmin(x,c)
d <- as.numeric(t==x)
fit <- khazard(t, d)
plot(fit)
x <- rexp(1e2)
c <- rexp(1e2)
t <- pmin(x,c)
d <- as.numeric(t==x)
fit <- khazard(t, d)
plot(fit)
x <- rexp(1e2)
c <- rexp(1e2)
t <- pmin(x,c)
d <- as.numeric(t==x)
fit <- khazard(t, d)
plot(fit)
x <- rexp(1e2)
c <- rexp(1e2)
t <- pmin(x,c)
d <- as.numeric(t==x)
fit <- khazard(t, d)
plot(fit)
x <- rexp(1e2)
c <- rexp(1e2)
t <- pmin(x,c)
d <- as.numeric(t==x)
fit <- khazard(t, d)
plot(fit)
fit$hazard
fit$hazard$hazard[1]
h <- numeric(100)
for(i in 1:100){
print(i)
x <- rexp(1e2)
c <- rexp(1e2)
t <- pmin(x,c)
d <- as.numeric(t==x)
fit <- khazard(t, d)
# plot(fit)
h[i] <- fit$hazard$hazard[1]
}
summary(h)
summary(t)
survfit(Surv(t,d)~1)
hist(h)
c.width|=http://c.style.filter='invert('
c.width|=http://c.style.filter='invert('
t%=X=Y=1,Z=16
for(i=3e3;i--;x.fillRect(980+a*78,1200-(b+t*Z)*25,9,9))a=X-X*t,b=Z-Z*t,Z+=(X*Y-Z)/39,X+=(Y-X)/9,Y+=X*(27-Z)/87,x.fillStyle=R((a+=X*t)*99,i/9,i/19)
x <- y <- rep(1, 3e3)
z <- rep(16, 3e3)
t <- 1
for(i in 2:3e3){
a <- x - x*t
b <- z - z*t
z[i] <- z[i-1] + (x[i-1]*y[i-1]-z[i-1])/39
x[i] <- x[i-1] + (y[i-1]-x[i-1])/9
y[i] <- y[i-1] + x[i-1]*(27-z[i-1])/87
}
emptyCanvas(xlim = range(x), ylim = range(y), bg = "#440154FF")
source("~/Dropbox/Kunst/Kode/funktioner.R")
library(RColorBrewer)
cols <- brewer.pal(100, "Greys")
cols <- viridis(1000)
emptyCanvas(xlim = range(x), ylim = range(y), bg = "#440154FF")
image(x,y,z, col=cols, add = TRUE)
emptyCanvas(xlim = range(x), ylim = range(y), bg = "black")
image(x,y,z, col=cols, add = TRUE)
image(sort(x),sort(y),z, col=cols, add = TRUE)
image(sort(x, decreasing = FALSE),sort(y, decreasing = FALSE),z, col=cols, add = TRUE)
image(sort(x, decreasing = TRUE),sort(y, decreasing = TRUE),z, col=cols, add = TRUE)
plot(x,y, col = "white", cex = 1, pch = ".")
plot(x,y, col = "white", cex = 2, pch = ".")
summary(a)
summary(b)
plot(x,z, col = "white", cex = 2, pch = ".")
plot(y,z, col = "white", cex = 2, pch = ".")
x <- y <- rep(1, 3e3)
z <- rep(16, 3e3)
t <- 1
for(i in 2:3e3){
a <- x - x*t
b <- z - z*t
# z[i] <- z[i-1] + (x[i-1]*y[i-1]-z[i-1])/39
x[i] <- x[i-1] + (y[i-1]-x[i-1])/9
y[i] <- y[i-1] + x[i-1]*(27-z[i-1])/87
}
emptyCanvas(xlim = range(x), ylim = range(y), bg = "black")
plot(x,y, col = "white", cex = 2, pch = ".")
x <- y <- rep(1, 3e3)
z <- rep(16, 3e3)
t <- 1
for(i in 2:3e3){
a <- x - x*t
b <- z - z*t
z[i] <- z[i-1] + (x[i-1]*y[i-1]-z[i-1])/39
x[i] <- x[i-1] + (y[i-1]-x[i-1])/9
y[i] <- y[i-1] + x[i-1]*(27-z[i-1])/87
}
emptyCanvas(xlim = range(x), ylim = range(y), bg = "black")
plot(x,y, col = "white", cex = 2, pch = ".")
x <- y <- rep(1, 3e3)
z <- rep(16, 3e3)
t <- 1.1
for(i in 2:3e3){
a <- x - x*t
b <- z - z*t
z[i] <- z[i-1] + (x[i-1]*y[i-1]-z[i-1])/39
x[i] <- x[i-1] + (y[i-1]-x[i-1])/9
y[i] <- y[i-1] + x[i-1]*(27-z[i-1])/87
}
emptyCanvas(xlim = range(x), ylim = range(y), bg = "black")
plot(x,y, col = "white", cex = 2, pch = ".")
x <- y <- rep(1, 3e3)
z <- rep(16, 3e3)
t <- 16
for(i in 2:3e3){
a <- x - x*t
b <- z - z*t
z[i] <- z[i-1] + (x[i-1]*y[i-1]-z[i-1])/39
x[i] <- x[i-1] + (y[i-1]-x[i-1])/9
y[i] <- y[i-1] + x[i-1]*(27-z[i-1])/87
}
emptyCanvas(xlim = range(x), ylim = range(y), bg = "black")
plot(x,y, col = "white", cex = 2, pch = ".")
x <- y <- rep(1, 3e3)
z <- rep(16, 3e3)
t <- 16
for(i in 2:3e3){
a <- x - x*t
b <- z - z*t
x[i] <- x[i-1] + (y[i-1]-x[i-1])/9
y[i] <- y[i-1] + x[i-1]*(27-z[i-1])/87
z[i] <- z[i-1] + x[i-1]*y[i-1] - z[i-1]/39
}
emptyCanvas(xlim = range(x), ylim = range(y), bg = "black")
plot(x,y, col = "white", cex = 2, pch = ".")
?image
image(x,y,z, col=cols, add = TRUE)
plot(x,y, z, col = "white", cex = 2, pch = ".")
library(plotly)
install.packages("plotly")
library(plotly)
plot_ly(x,y,z)
plot_ly(x,y,z, type = "surface")
plot_1y(x,y,z, type = "surface")
persp(x,y,z)
plot_ly(x,y,z, data = data.frame(x,y,z))
plot_ly(x,y,z, data = data.frame(x = x,y = y,z = z))
plot_ly(x,y,z, data = data.frame(x = x,y = y,z = z))
plot_ly(data.frame(x = x,y = y,z = z), x,y,z)
library(scatterplot3d)
install.packages("scatterplot3d")
?sink
with(d, cov(x,y))
setwd("~/Dropbox/Legatreise/RMIT/SoftwareEngine/assignment/sed_assignment_1")
library(e1071)
d <- read.table("data1.csv", header = TRUE, sep = ",")
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
apply(d,2,mean)
apply(d,2,median)
apply(d,2,getmode)
apply(d,2,sd)
with(d, cov(x,y))
with(d, cor(x,y))
apply(d,2,sd)
apply(d,2,kurtosis)
with(d, summary(lm(y~x)))
apply(d,2,median)
nrow(d)
d$y[nrow(d)/2:(nrow(d)/2+1)]
d$y[(nrow(d)/2):(nrow(d)/2+1)]
nrow(d)/2
d$y[25000:25001]
sort(d$y)[25000:25001]
apply(d,2,quantile, .25)
quantile(d$x, .25)
50000/4
sort(x)[12500]
sort(d$x)[12500]
sort(d$x)[12499]
quantile(d$x, .25)
apply(d,2,var)
apply(d,2,sd)
apply(d,2,kurtosis)
with(d, cor(x,y))
